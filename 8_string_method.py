
a="yellow FLASH of the leaf"


m=a.capitalize()	 #Converts the first character to upper case
m=a.casefold()	     #Converts string into lower case
m=a.center()	     #Returns a centered string
m=a.count()	         #Returns the number of times a specified value occurs in a string
m=a.encode()	     #Returns an encoded version of the string
m=a.endswith()	     #Returns true if the string ends with the specified value
m=a.expandtabs()	 #Sets the tab size of the string
m=a.find()	         #Searches the string for a specified value and returns the position of where it was found
m=a.format()	     #Formats specified values in a string
m=a.format_map()	 #Formats specified values in a string
m=a.index()	         #Searches the string for a specified value and returns the position of where it was found
m=a.isalnum()	     #Returns True if all characters in the string are alphanumeric
m=a.isalpha()	     #Returns True if all characters in the string are in the alphabet
m=a.isascii()	     #Returns True if all characters in the string are ascii characters
m=a.isdecimal()	     #Returns True if all characters in the string are decimals
m=a.isdigit()	     #Returns True if all characters in the string are digits
m=a.isidentifier()	 #Returns True if the string is an identifier
m=a.islower()	     #Returns True if all characters in the string are lower case
m=a.isnumeric()	     #Returns True if all characters in the string are numeric
m=a.isprintable()  	 #Returns True if all characters in the string are printable
m=a.isspace()	     #Returns True if all characters in the string are whitespaces
m=a.istitle()	     #Returns True if the string follows the rules of a title
m=a.isupper()	     #Returns True if all characters in the string are upper case
m=a.join()	         #Joins the elements of an iterable to the end of the string
m=a.ljust()	         #Returns a left justified version of the string
m=a.lower()	         #Converts a string into lower case
m=a.lstrip()	     #Returns a left trim version of the string
m=a.maketrans()	     #Returns a translation table to be used in translations
m=a.partition()	     #Returns a tuple where the string is parted into three parts
m=a.replace()	     #Returns a string where a specified value is replaced with a specified value
m=a.rfind()	         #Searches the string for a specified value and returns the last position of where it was found
m=a.rindex()	     #Searches the string for a specified value and returns the last position of where it was found
m=a.rjust()	         #Returns a right justified version of the string
m=a.rpartition()	 #Returns a tuple where the string is parted into three parts
m=a.rsplit()	     #Splits the string at the specified separator, and returns a list
m=a.rstrip()	     #Returns a right trim version of the string
m=a.split()	         #Splits the string at the specified separator, and returns a list
m=a.splitlines()	 #Splits the string at line breaks and returns a list
m=a.startswith()	 #Returns true if the string starts with the specified value
m=a.strip()	         #Returns a trimmed version of the string
m=a.swapcase()	     #Swaps cases, lower case becomes upper case and vice versa
m=a.title()	         #Converts the first character of each word to upper case
m=a.translate()	     #Returns a translated string
m=a.upper()	         #Converts a string into upper case
m=a.zfill()	         #Fills the string with a specified number of 0 values at the beginning